package com.xywy.drug.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xywy.drug.data.dao.DBMedicineBox;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DBMEDICINE_BOX.
*/
public class DBMedicineBoxDao extends AbstractDao<DBMedicineBox, Long> {

    public static final String TABLENAME = "DBMEDICINE_BOX";

    /**
     * Properties of entity DBMedicineBox.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property MedicineIds = new Property(2, String.class, "medicineIds", false, "MEDICINE_IDS");
        public final static Property SyncId = new Property(3, String.class, "syncId", false, "SYNC_ID");
        public final static Property Owner = new Property(4, String.class, "owner", false, "OWNER");
    };


    public DBMedicineBoxDao(DaoConfig config) {
        super(config);
    }
    
    public DBMedicineBoxDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DBMEDICINE_BOX' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'MEDICINE_IDS' TEXT," + // 2: medicineIds
                "'SYNC_ID' TEXT," + // 3: syncId
                "'OWNER' TEXT);"); // 4: owner
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DBMEDICINE_BOX'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBMedicineBox entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String medicineIds = entity.getMedicineIds();
        if (medicineIds != null) {
            stmt.bindString(3, medicineIds);
        }
 
        String syncId = entity.getSyncId();
        if (syncId != null) {
            stmt.bindString(4, syncId);
        }
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(5, owner);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBMedicineBox readEntity(Cursor cursor, int offset) {
        DBMedicineBox entity = new DBMedicineBox( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // medicineIds
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // syncId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // owner
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBMedicineBox entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMedicineIds(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSyncId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOwner(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBMedicineBox entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBMedicineBox entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
