package com.gooddoctor.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NOTIFICATION.
*/
public class NotificationDao extends AbstractDao<Notification, Long> {

    public static final String TABLENAME = "NOTIFICATION";

    /**
     * Properties of entity Notification.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PersonName = new Property(1, String.class, "personName", false, "PERSON_NAME");
        public final static Property MedicineId = new Property(2, String.class, "medicineId", false, "MEDICINE_ID");
        public final static Property StartDate = new Property(3, java.util.Date.class, "startDate", false, "START_DATE");
        public final static Property RepeatCount = new Property(4, Integer.class, "repeatCount", false, "REPEAT_COUNT");
        public final static Property NotificationEnabled = new Property(5, Boolean.class, "notificationEnabled", false, "NOTIFICATION_ENABLED");
    };


    public NotificationDao(DaoConfig config) {
        super(config);
    }
    
    public NotificationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NOTIFICATION' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'PERSON_NAME' TEXT," + // 1: personName
                "'MEDICINE_ID' TEXT," + // 2: medicineId
                "'START_DATE' INTEGER," + // 3: startDate
                "'REPEAT_COUNT' INTEGER," + // 4: repeatCount
                "'NOTIFICATION_ENABLED' INTEGER);"); // 5: notificationEnabled
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTIFICATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Notification entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String personName = entity.getPersonName();
        if (personName != null) {
            stmt.bindString(2, personName);
        }
 
        String medicineId = entity.getMedicineId();
        if (medicineId != null) {
            stmt.bindString(3, medicineId);
        }
 
        java.util.Date startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(4, startDate.getTime());
        }
 
        Integer repeatCount = entity.getRepeatCount();
        if (repeatCount != null) {
            stmt.bindLong(5, repeatCount);
        }
 
        Boolean notificationEnabled = entity.getNotificationEnabled();
        if (notificationEnabled != null) {
            stmt.bindLong(6, notificationEnabled ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Notification readEntity(Cursor cursor, int offset) {
        Notification entity = new Notification( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // medicineId
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // startDate
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // repeatCount
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // notificationEnabled
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Notification entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPersonName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMedicineId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStartDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setRepeatCount(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setNotificationEnabled(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Notification entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Notification entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
